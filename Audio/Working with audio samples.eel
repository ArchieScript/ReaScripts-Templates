/*  Working with audio in ReaScript
    
    This template was adapted from eugen2777's "Create stretch markers at transients"
    EEL script. Cheers to him.  
    
*/

item = GetSelectedMediaItem(0, 0);
take = GetActiveTake(item);
PCM_source = GetMediaItemTake_Source(take);
srate = GetMediaSourceSampleRate(PCM_source);


// Perform some sort of action based on the audio in the selected take
// (within the current time selection, if any)
function IterateSamples(item, take, samplerate)

    local(Threshold_dB, Sensitivity_dB, Retrig_sec,  Threshold, Sensitivity, Retrig, 
        attTime1, relTime1, attTime2, relTime2, ga1, gr1, ga2, gr2, envOut1, envOut2
        item_start, item_len, sel_start, sel_end, playrate, range_start, range_len, range_end, range_len_smpls,
        block_size, n_blocks, rest_smples, mrk,
        AA, starttime_sec, samplebuffer, cur_block, smpl, input, mrk_pos, retrig_cnt)
    (      
    
    // Sort out the selection range
    item_start = GetMediaItemInfo_Value(item, "D_POSITION");
    item_len  = GetMediaItemInfo_Value(item, "D_LENGTH"); 
    GetSet_LoopTimeRange(0, 0, sel_start, sel_end, 0);    
    !(sel_end - sel_start) ? ( 
        sel_start = item_start; 
        sel_end = item_start+item_len;
    );
    
    sel_start = max(sel_start, item_start);
    sel_end   = min(sel_end, item_start+item_len);
    sel_end - sel_start < 0 ? MB("Time selection out of item range!", "Note", 0); 
    
    // Make sure the selection is coherent
    sel_end - sel_start > 0 ? (
    
        
        // The math is much simpler if we convert to playrate == 1
        // Don't worry, we'll put everything back afterward
        playrate  = GetMediaItemTakeInfo_Value(take, "D_PLAYRATE");
        playrate != 1 ? (
        SetMediaItemTakeInfo_Value(take, "D_PLAYRATE", 1);
        SetMediaItemInfo_Value(item, "D_LENGTH", item_len*playrate);
        );
        
        // Define the time range w.r.t the original playrate
        range_start = (sel_start-item_start)*playrate;
        range_len = (sel_end-sel_start)*playrate;
        range_end = range_start+range_len;
        range_len_smpls = floor(range_len*srate);
        
        // Break the range into blocks
        block_size = 65536;
        n_blocks = floor(range_len_smpls/block_size); 
        rest_smples = range_len_smpls - block_size*n_blocks;
        
        
        // 'samplebuffer' will hold all of the audio data for each block
        AA = CreateTakeAudioAccessor(take);
        starttime_sec = range_start;
        samplebuffer = 0;
        cur_block = 0;
        

        // Loop through the audio, one block at a time
        loop(n_blocks+1,
        
            // The last iteration will almost never be a full block
            cur_block == n_blocks ? block_size = rest_smples;
            
            // EEL doesn't have dynamic arrays, so we have to specify how much memory to use
            memset(0,0,block_size);
            
            // Loads 'samplebuffer' with the next block
            GetAudioAccessorSamples(AA, srate, 1, starttime_sec, block_size, samplebuffer);
            
            smpl=0;
            loop(block_size,
            
                spl = samplebuffer[smpl]; // abs sample value(abs envelope)
                
                //
                //
                //  Do whatever you want
                //  with the sample here
                //
                //
                
                smpl+=1;  
                
            );
            
            // Increment our position and block number
            starttime_sec+=65536/srate;
            cur_block+=1;
            
        );
        
        // Tell Reaper we're done working with this item, so the memory can be freed
        DestroyAudioAccessor(AA);
        
        // I told you we'd put everything back
        playrate != 1 ? (
            SetMediaItemTakeInfo_Value(take, "D_PLAYRATE", playrate); // restore orig playrate
            SetMediaItemInfo_Value(item, "D_LENGTH", item_len);  // restore orig length
        );  
    
    
        UpdateTimeline();
    );          
        
    ShowConsoleMsg("All done")

);



// Quick error check, and then run the function
srate ? ( IterateSamples(item, take, samplerate); );
        